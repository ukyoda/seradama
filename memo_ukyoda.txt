構築メモ

・ゲーム管理オブジェクト(Game.js)
  ＜クラスプロパティ Gameにつけるプロパティ＞
  - _invFps        FPSの逆数
  - _iterations   繰り返し? Box2Dに渡す値
  - _maxTime      制限時間
  - _pastMaxTime  タイムアウト処理時間
  - 各種イベントの値
    + EV_UPDATE = 'update'
    + EV_GOAL = 'goal'
    + EV_ENTRY = 'entry'
    + EV_FRAME_UPDATE='frameUpdate'
    + EV_GOAL='goal'
    + EV_GOAL_END='goalEnd'
    + EV_TIMEOUT='timeout'
    + EV_TIMEOUT_END='timeoutEnd'
    + EV_STAGE_UPDATED='stageUpdated'
  ＜プロパティ＞
  - world             Box2Dのワールド情報
  - funnyWorld        並行世界 （タイムアウト時の処理のやつ）
  - players           参加しているプレイヤー情報
  - playersCount      参加しているプレイヤー数
  - funnyWorldIsAlive 並行世界の存在フラグ
  - stage             ステージ情報(Stageのインスタンス)
  - interval          intervalオブジェクト

  ＜機能＞
  ※ 機能がごちゃごちゃするので、「model/game/」下にメソッドを作っていく。
  - getMessageObject クライアントに送信するデータを作る機能
                     次の通り作成する

  - addPlayer        クライアントが接続してきたらプレイヤーオブジェクトを作成し、
                     管理オブジェクトに追加する。ただし、ユーザの規定数を超えた場合はデータを作成しない。
                     プレイヤーの追加が成功すればtrueを返し、失敗すればfalseを返す
  - playerUpdate     プレイヤーの操作を反映する機能。並行世界が有効の場合はfalse
  - removePlayer     プレイヤー削除する機能
  - _loop            Box2Dの物理演算(setIntervalで繰り返し処理する)
  - nextStage        新しいステージを作成する。※初回はステージ1

  ＜イベント＞
  - 誰かがゴールしたらイベント（goal）を発生させる
  - ユーザが追加されたらイベント（entry）を発生させる
  - １フレーム終わったらイベント（frameUpdate）を発生させる
  - ゴールイベントが発生したらイベント(goal)を発生させ、ゴール処理をおこなう（ステージをぶっ壊す）
    ゴールの演出が終わったらイベント（goalEnd）を発生させる
  - タイムアウトになったらイベント（timeout）を発生させる（タイムアウト表示）
    タイムアウトの演出が終わったらイベント（timeoutEnd）を発生させる
  - 新しいステージを作成したらイベント（stageUpdated）を発生させる
  - 上記のイベントについて、共通イベント（update）を発生させる


・各種ブロックなどのオブジェクト
  - Goal        ゴールオブジェクト
  - Kabe        壁オブジェクト
  - Maru        丸い壁オブジェクト
  - Movable     動く壁オブジェクト
  - MovableMaru 動く丸い壁オブジェクト
  - Player      プレイヤーオブジェクト(コロコロ)
  - Stage       ステージオブジェクト ※詳細は「ステージオブジェクト」を参照

・ステージオブジェクト
  ＜プロパティ＞
  - stageIndex        ステージ配列のインデックス
  - world             Box2Dのオブジェクト ※コンストラクタで指定
  - kabes             壁管理
  - goals             ゴール管理
  - movableKabes      壁管理
  - initPoint         ユーザの初期位置
  - stageName         ステージの名前(ファイル名)
  - startTime         ステージ開始の時間
  - bestTime          そのステージのベストタイム

  ＜機能＞
  - getSendData クライアントに送るステージ情報を返す
  - nextStage   次のステージを作成する ※初回はステージ1
  - getTime ステージ開始から何秒経過したかを返す
  - getBestTimeData ベストタイムの情報を返す
  - setPlayer プレイヤーを初期値にセットする (引数にユーザ情報をセット)
  - destroyStage ステージから障害物を削除する

・Socket.io 関連(SocketServer.js)
  - コンストラクタ
    - ゲームオブジェクト(Gamen.js)を作成する
      + とりあえず１固定で処理するが、複数の部屋を作成できるように配列で持っておく
      + socketを作成する
      + connectionにイベントを追加する

  - ソケットイベント「connection」の処理
    １．Game.jsにプレイヤーオブジェクトを作成させる
    ２−１．プレイヤーの追加に成功したら、クライアントのソケットに次の処理を連携する
       + ユーザのソケットイベント「message」に処理を連携する ※詳細はmessageを参照
       + ユーザのソケットイベント「disconnect」に処理を連携する ※詳細はdisconnectを参照
    ２−２．プレイヤーの追加に失敗したら、クライアントのソケットにつgのメッセージを送る
          {
            value: [
              {datatype: 'restrict'}
            ]
          }

  - ソケットイベント「message」の処理
    クライアントから受け取ったデータを使って「playerUpdate」を実行する

  - ソケットイベント「disconnect」の処理

  - ゲームイベント関連の処理
    イベントupdateが発生したら、全プレイヤーのクライアント側にゲームデータを送信する


