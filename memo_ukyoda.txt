構築メモ

・ゲーム管理オブジェクト(Game.js)
  ゲームとWebSocket(クライアント)の操作をつなぐコントローラとしての役割を有する。

  ＜プロパティ＞
  - stage             Stageのインスタンス（コンストラクタで生成する）
  - timeoutStage      TimeoutStageのインスタンス（コンストラクタで生成する）
  - playersCount      参加しているプレイヤー数 (初期値0)
  - socket            SocketServerのインスタンス(コンストラクタの引数から取得する)
  - interval          intervalオブジェクト ※ Stageで管理する可能性あり

  ＜Stage の定期更新＞
  Gameオブジェクトは，setIntervalにより，定期的にステージの情報を更新する。
  同時に，ステージの更新を抑制する機能も有すること。

  ＜Stage イベント監視＞
  Stage(後述)がコールするイベントを監視し、SocketServer経由でクライアントにメッセージを送信する

  doStageUpdate   Stageからイベント「update」を受け取った時に実行する。Gameオブジェクトはソケットサーバにステージの更新情報を渡す
  doStageTimeup        Stageからイベント「timeup」を受け取った時に実行する。GameオブジェクトはTimeoutStageにステージを作成する

  ＜TimeoutStage イベント監視＞
  doTimeoutStageUpdate  TimeoutStageからイベント「update」を受け取った時に実行する。Gameオブジェクトはソケットサーバにタイムアップ表示のデータを渡す

  ＜ソケットサーバ イベント監視＞
  ソケットサーバ経由で受け取ったクライアントからのイベントに対して、ステージを更新する。

  doSocketConnect         SocketServerからイベント「connect」を受け取った時に実行する。GameオブジェクトはStageに新しいユーザを追加する
                          ただし，ユーザ数が規定値を超えている場合はユーザの追加を実行せず，その旨をSocketServer経由でクライアントに送信する
  doSocketRecieveMessage  SocketServerからイベント「message」を受け取った時に実行する。ユーザの操作（スマホの傾き）情報をStageオブジェクトに反映する
  doSocketDisconnect      SocketServerからイベント「disconnect」を受け取った時に実行する。Stageからユーザを除外する

  ＜イベント＞

・各種ブロックなどのオブジェクト
  Box2Dに配置するオブジェクトは、model/objects にある次のオブジェクトで構成する。
  Stageオブジェクト(後述)は、次のオブジェクトをBox2Dに配置することとなる
  - Goal        ゴールオブジェクト
  - Kabe        壁オブジェクト
  - Maru        丸い壁オブジェクト
  - Movable     動く壁オブジェクト
  - MovableMaru 動く丸い壁オブジェクト
  - Player      プレイヤーオブジェクト(コロコロ)
  - MessageDot  タイムアウトメッセージで表示するドットオブジェクト


・ステージオブジェクト (stage/Stage.js)
  Box2Dを使ってグラコロの世界を管理するオブジェクト。
  ステージ上に配置されるオブジェクトの管理及び物理エンジンの更新などを行う

  - _invFps          FPSの逆数
  - _iterations      繰り返し? Box2Dに渡す値
  - _maxTime         制限時間
  - _pastMaxTime     タイムアウト処理時間
  - _lockFlg         ロックフラグ。trueの場合はゴールしてもゴールイベントを発生させない
  - _limit           制限時間
  - 各種イベントの値
    + EV_UPDATE = 'update' イベントを起こす。コールバック関数に渡す引数として、クライアントに送信するデータ配列を指定する

  ＜プロパティ＞
  - stageIndex        ステージ配列のインデックス
  - world             Box2Dのオブジェクト
  - kabes             壁管理
  - goals             ゴール管理
  - movableKabes      壁管理
  - players           ユーザ管理
  - initPoint         ユーザの初期位置
  - stageName         ステージの名前(ファイル名)
  - startTime         ステージ開始の時間
  - bestTime          そのステージのベストタイム

  ＜機能＞
  - nextStage             次のステージを作成する。
                          更新後、イベント「update」を発生させ、古いデータの削除データと新しいデータの更新データを返す
                          ※ステージ情報JSONファイルを非同期にJSONファイルを読み込んで作成するようにしたい
  - destroyStage          ステージから障害物を削除する。削除する障害物の情報を返す
  - startGoalAction       プレイヤーがステージをクリアしたらゴールエフェクトを発生させる。
                          ベストタイムの更新およびゴールしたプレイヤーの勝利回数を更新する
  - finishGoalAction      ゴールエフェクトを終了する。
  - getTime               ステージ開始から何秒経過したかを返す
  - getBestTimeData       ベストタイムの情報を返す
  - addPlayer             指定されたユーザの情報をBox2Dにセットする
  - removePlayer          指定されたユーザの情報をBox2Dから除外する
  - updatePlayerPosition  指定されたユーザの位置情報を更新する
  - update                次の処理フローに基づいた処理を行う
                          １.Box2Dの世界を進める
                          ２.ゴールした人の判定 (_lockFlgがonの場合，ゴール判定を行わない)
                            - ゴールしたプレイヤーがいればstartGoalEffectを実行する.
                          ３.タイムアップ判定
                            - 制限時間を超えていた場合、イベント「timeup」を送信する
                          ４.updateイベントを発生させ、更新オブジェクトをクライアントに送る

・ソケットサーバオブジェクト (SocketServer.js)
  位置づけとしてはSocket.ioのラッパーオブジェクトのような立ち位置。
  プロセス内で１つしか作成しないこととする。

  ＜プロパティ＞
  - socket Socket.ioのインスタンス

  ＜機能＞
  - emit              クライアントにデータを送信する
  - doConnectUser     クライアントがSocket通信を開始した時に実行する。イベント「connect」を発生させる
  - doRecieveMessage  クライアントからのメッセージを受け取った時に実行する。イベント「message」」を発生させる
  - doDisconnectUser  クライアントがSocket通信を切断した時に実行する。イベント「disconnect」を発生させる
  - emit              クライアントに
