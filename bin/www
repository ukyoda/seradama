#!/usr/bin/env node
var debug = require('debug')('sera-dev2');
var app = require('../app');

var objs = {};
var msgs = [];

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

// 世界
var b2d = require("box2d");
var worldAABB = new b2d.b2AABB();
worldAABB.lowerBound.Set(-100.0, -100.0);
worldAABB.upperBound.Set(100.0, 100.0);
var gravity = new b2d.b2Vec2(0.0, 0.0);
var doSleep = true;
var world = new b2d.b2World(worldAABB, gravity, doSleep);

// 地面
var groundBodyDef = new b2d.b2BodyDef();
groundBodyDef.position.Set(0.0, -12.5);
var groundBody = world.CreateBody(groundBodyDef);
var groundShapeDef = new b2d.b2PolygonDef();
groundShapeDef.SetAsBox(25.0, 1.0);
groundBody.CreateShape(groundShapeDef);

// 天井
var roofBodyDef = new b2d.b2BodyDef();
roofBodyDef.position.Set(0.0, 12.5);
var roofBody = world.CreateBody(roofBodyDef);
var roofShapeDef = new b2d.b2PolygonDef();
roofShapeDef.SetAsBox(25.0, 1.0);
roofBody.CreateShape(roofShapeDef);

// 壁左
var wallLeftBodyDef = new b2d.b2BodyDef();
wallLeftBodyDef.position.Set(-12.5, 0.0);
var wallLeftBody = world.CreateBody(wallLeftBodyDef);
var wallLeftShapeDef = new b2d.b2PolygonDef();
wallLeftShapeDef.SetAsBox(1.0, 25.0);
wallLeftBody.CreateShape(wallLeftShapeDef);

// 壁右
var wallRightBodyDef = new b2d.b2BodyDef();
wallRightBodyDef.position.Set(12.5, 0.0);
var wallRightBody = world.CreateBody(wallRightBodyDef);
var wallRightShapeDef = new b2d.b2PolygonDef();
wallRightShapeDef.SetAsBox(1.0, 25.0);
wallRightBody.CreateShape(wallRightShapeDef);

// add start
var socketIO = require('socket.io');
// クライアントの接続を待つ(IPアドレスとポート番号を結びつけます)
var io = socketIO.listen(server);

var getPosition = function(data) {
	rotation = event.rotation;
};

// クライアントが接続してきたときの処理
io.sockets.on('connection', function(socket) {
  console.log("connection");
  // メッセージを受けたときの処理

  socket.on('message', function(data) {
    console.log(data);
    var obj = objs[data.id];
    if(obj){
      //
    }else{
      console.log("無いから作るよ");
      // ころころ追加
      var corocoroDef = new b2d.b2BodyDef();
      corocoroDef.position.Set(1.0, 1.0);
      var corocoro = world.CreateBody(corocoroDef);
//      var corocoroShapeDef = new b2d.b2PolygonDef();
      var corocoroShapeDef = new b2d.b2CircleDef();
//      corocoroShapeDef.SetAsBox(0.5, 0.5);
      corocoroShapeDef.radius = 0.5;
      corocoroShapeDef.density = 1.0;
      corocoroShapeDef.friction = 0.5;
      corocoroShapeDef.restitution = 0.7;
      corocoro.CreateShape(corocoroShapeDef);
      corocoro.SetMassFromShapes();
      var userData = {};
      userData.id = data.id;
      corocoro.m_userData = userData;
      objs[data.id] = corocoro;
      obj = objs[data.id];
    }
    if(data.gravity.x == 0 || data.gravity.y == 0){
      // 
    }else{
      var ax = (data.gravity.x / Math.sqrt((Math.pow(data.gravity.x, 2) + Math.pow(data.gravity.y, 2)))) * (10.0 + 5.0);
      var ay = (data.gravity.y / Math.sqrt((Math.pow(data.gravity.x, 2) + Math.pow(data.gravity.y, 2)))) * (10.0 + 5.0);
      obj.ApplyForce(new b2d.b2Vec2(ax, ay), obj.GetPosition());
    }  

    //io.sockets.emit('message', data);
  });

  // クライアントが切断したときの処理
  socket.on('disconnect', function(){
    console.log("disconnect");

  });
});

// 精度
var iterations = 10;
var fps = 15;
var interval;

function doAnim() {
  interval = setInterval(function() {
    world.Step(1.0/fps, iterations);
    var count = 0;
    for(var i in objs){
      var position = objs[i].GetPosition();
      var x = (position.x * 32) + (32 * 12.5);
      var y = (position.y * -32) + (32 * 12.5);
      var angle = (objs[i].GetAngle() * -1);
      var xya = {x:x.toFixed(3), y:y.toFixed(3), angle:angle.toFixed(3), id:objs[i].m_userData.id};
      msgs[count] = xya;
      count++;
    }
//    io.sockets.emit('message', {value: objs});
    io.sockets.emit('message', {value: msgs});
//    console.log("x:"+position.x+", y:"+position.y+", angle:"+angle);
  }, 1000/fps);
}
doAnim();

// add end