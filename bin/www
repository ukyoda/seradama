#!/usr/bin/env node
var debug = require('debug')('sera-dev2');
var app = require('../app');

var gamedata = require('../public/game/gamedata.json');

var player_textures = require('../public/texture/player.json');
var player_texture_names = [];
var p_t_n_count = 0;
for(var i in player_textures.frames){
  player_texture_names[p_t_n_count] = i;
  p_t_n_count++;
}

var objs = {};
//var msgs = [];
var goals = {};
var kabes = {};
var stage1 = require('../stage/stage1.json');
var userCount = 0;

app.set('port', process.env.PORT || 80);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

// 世界
var b2d = require("box2d");
var worldAABB = new b2d.b2AABB();
worldAABB.lowerBound.Set(-100.0, -100.0);
worldAABB.upperBound.Set(100.0, 100.0);
var gravity = new b2d.b2Vec2(0.0, 0.0);
//var gravity = new b2d.b2Vec2(0.0, -10.0);
var doSleep = true;
var world = new b2d.b2World(worldAABB, gravity, doSleep);

// 地面
var groundBodyDef = new b2d.b2BodyDef();
//groundBodyDef.position.Set(0.0, -12.5);
groundBodyDef.position.Set(0.0, -1 * (gamedata.world.height/64.0));
var groundBody = world.CreateBody(groundBodyDef);
var groundShapeDef = new b2d.b2PolygonDef();
//groundShapeDef.SetAsBox(25.0, 1.0);
groundShapeDef.SetAsBox(gamedata.world.width/32.0, 1.0);
groundBody.CreateShape(groundShapeDef);

// 天井
var roofBodyDef = new b2d.b2BodyDef();
roofBodyDef.position.Set(0.0, (gamedata.world.height/64.0));
var roofBody = world.CreateBody(roofBodyDef);
var roofShapeDef = new b2d.b2PolygonDef();
roofShapeDef.SetAsBox(gamedata.world.width/32.0, 1.0);
roofBody.CreateShape(roofShapeDef);

// 壁左
var wallLeftBodyDef = new b2d.b2BodyDef();
wallLeftBodyDef.position.Set(-1 * (gamedata.world.width/64.0), 0.0);
var wallLeftBody = world.CreateBody(wallLeftBodyDef);
var wallLeftShapeDef = new b2d.b2PolygonDef();
wallLeftShapeDef.SetAsBox(1.0, gamedata.world.height/32.0);
wallLeftBody.CreateShape(wallLeftShapeDef);

// 壁右
var wallRightBodyDef = new b2d.b2BodyDef();
wallRightBodyDef.position.Set((gamedata.world.width/64.0), 0.0);
var wallRightBody = world.CreateBody(wallRightBodyDef);
var wallRightShapeDef = new b2d.b2PolygonDef();
wallRightShapeDef.SetAsBox(1.0, gamedata.world.height/32.0);
wallRightBody.CreateShape(wallRightShapeDef);

// add start
var socketIO = require('socket.io');
// クライアントの接続を待つ(IPアドレスとポート番号を結びつけます)
var io = socketIO.listen(server);
io.set("log level", 2);

var getPosition = function(data) {
	rotation = event.rotation;
};

// クライアントが接続してきたときの処理
io.sockets.on('connection', function(socket) {
  console.log("connection");

  // ステージデータ送信
  var count = 0;
  var msgs = [];
  for(var i in kabes){
    var position = kabes[i].GetPosition();
    var x = (position.x * 32) + (gamedata.world.width / 2.0);
    var y = (position.y * -32) + (gamedata.world.height / 2.0);
    var angle = (kabes[i].GetAngle() * -1);
    var xya = {x:x.toFixed(3), y:y.toFixed(3), angle:angle.toFixed(3), id:kabes[i].m_userData.id, texture:kabes[i].m_userData.texture, datatype:"object"};
    msgs[count] = xya;
    count++;
  }
  // ゴールデータ送信
  for(var i in goals){
    var position = goals[i].GetPosition();
    var x = (position.x * 32) + (gamedata.world.width / 2.0);
    var y = (position.y * -32) + (gamedata.world.height / 2.0);
    var angle = (goals[i].GetAngle() * -1);
    var xya = {x:x.toFixed(3), y:y.toFixed(3), angle:angle.toFixed(3), id:goals[i].m_userData.id, texture:goals[i].m_userData.texture, datatype:"object"};
    msgs[count] = xya;
    count++;
  }
  // ころころ追加
  userCount++;
  var corocoroDef = new b2d.b2BodyDef();
  corocoroDef.position.Set(-5.0, 5.0);
  var corocoro = world.CreateBody(corocoroDef);
  var corocoroShapeDef = new b2d.b2CircleDef();
  corocoroShapeDef.radius = 0.5;
  corocoroShapeDef.density = 1.0;
  corocoroShapeDef.friction = 0.5;
  corocoroShapeDef.restitution = 0.7;
  corocoro.CreateShape(corocoroShapeDef);
  corocoro.SetMassFromShapes();
  var userData = {};
  userData.id = "ball_" + userCount;
//  userData.texture = "player_1.png";
  userData.texture = player_texture_names[Math.floor(Math.random() * p_t_n_count)];
  userData.datatype = "player";
  corocoro.m_userData = userData;
  objs[socket.id] = corocoro;
  var position = corocoro.GetPosition();
  var x = (position.x * 32) + (gamedata.world.width / 2.0);
  var y = (position.y * -32) + (gamedata.world.height / 2.0);
  var angle = (corocoro.GetAngle() * -1);
  var xya = {x:x.toFixed(3), y:y.toFixed(3), angle:angle.toFixed(3), id:corocoro.m_userData.id, texture:corocoro.m_userData.texture, datatype:"you"};
  msgs[count] = xya;
  count++;

  // メッセージ送信
  socket.emit('message', {value: msgs});

  // メッセージを受けたときの処理
  socket.on('message', function(data) {
//    console.log(data);
    var obj = objs[socket.id];
    if(obj){
      //
    }else{
      //
    }
    if(data.gravity.x == 0 || data.gravity.y == 0){
      data.gravity.x = (Math.random() * 20.0) - 10.0;
      data.gravity.y = (Math.random() * 20.0) - 10.0;
    }
    var ax = (data.gravity.x / Math.sqrt((Math.pow(data.gravity.x, 2) + Math.pow(data.gravity.y, 2)))) * (10.0 + 5.0);
    var ay = (data.gravity.y / Math.sqrt((Math.pow(data.gravity.x, 2) + Math.pow(data.gravity.y, 2)))) * (10.0 + 5.0);
    obj.ApplyForce(new b2d.b2Vec2(ax, ay), obj.GetPosition());

    //io.sockets.emit('message', data);
  });

  // クライアントが切断したときの処理
  socket.on('disconnect', function(){
    console.log("disconnect:" + socket.id);
    delObj = objs[socket.id];
    if(delObj){
      var xya = {x:-100.0, y:-100.0, angle:0.0, id:objs[socket.id].m_userData.id, delflag:1, datatype:"player"};
      var msgs = [];
      msgs[0] = xya;
      delete objs[socket.id];
      io.sockets.emit('message', {value: msgs});
      world.DestroyBody(delObj);
    }
  });
});

function makeStage(){
  for(var i in stage1){
    var b2dobj = stage1[i];
    
    // ゴール配置
    if(b2dobj.goal){
      var goalDef = new b2d.b2BodyDef();
      goalDef.position.Set(b2dobj.x, b2dobj.y);
      goalDef.angle = b2dobj.angle;
      var goal = world.CreateBody(goalDef);
      var goalShapeDef = new b2d.b2PolygonDef();
      goalShapeDef.SetAsBox(b2dobj.w, b2dobj.h);
      goal.CreateShape(goalShapeDef);

      var userData = {};
      userData.id = b2dobj.id;
      userData.texture = b2dobj.texture;
      goal.m_userData = userData;

      goals[b2dobj.id] = goal;
    }else{
      // 障害物追加
      var kabeDef = new b2d.b2BodyDef();
      kabeDef.position.Set(b2dobj.x, b2dobj.y);
      kabeDef.angle = b2dobj.angle;
      var kabe = world.CreateBody(kabeDef);
      var kabeShapeDef = new b2d.b2PolygonDef();
      kabeShapeDef.SetAsBox(b2dobj.w, b2dobj.h);
      kabe.CreateShape(kabeShapeDef);

      var userData = {};
      userData.id = b2dobj.id;
      userData.texture = b2dobj.texture;
      kabe.m_userData = userData;

      kabes[b2dobj.id] = kabe;
    }
  }
}
makeStage();

// 精度
var iterations = 10;
var fps = 15;
var interval;

function doAnim() {
  interval = setInterval(function() {
    world.Step(1.0/fps, iterations);
    
    // ゴール判定
    var contact = goals["goal"].m_contactList;
    if(contact){
      for(var i in objs){
        objs[i].SetXForm(new b2d.b2Vec2(-10.0 + Math.random(), 10.0 + Math.random()), 0.0);
      }
    }
    
    var count = 0;
    var msgs = [];
    for(var i in objs){
      var position = objs[i].GetPosition();
      var x = (position.x * 32) + (gamedata.world.width / 2.0);
      var y = (position.y * -32) + (gamedata.world.height / 2.0);
      var angle = (objs[i].GetAngle() * -1);
      var xya = {x:x.toFixed(3), y:y.toFixed(3), angle:angle.toFixed(3), id:objs[i].m_userData.id, texture:objs[i].m_userData.texture, datatype:"player"};
      if(objs[i].m_contactList){
        xya.collision = 1;
      }
      msgs[count] = xya;
      count++;
    }
//    io.sockets.emit('message', {value: objs});
    io.sockets.emit('message', {value: msgs});
//    console.log("x:"+position.x+", y:"+position.y+", angle:"+angle);
  }, 1000/fps);
}
doAnim();

// add end