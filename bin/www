#!/usr/bin/env node
var debug = require('debug')('sera-dev2');
var app = require('../app');

var gamedata = require('../public/game/gamedata.json');
var stages = [];
stages[0] = require('../stage/stage1.json');

var fs = require('fs');
fs.readdir('./stage', function(err, files){
  for(var i in files){
  	var stage = require('../stage/' + files[i]);
  	stages.push(stage);
  }
});

var player_textures = require('../public/texture/player.json');
var player_texture_names = [];
var p_t_n_count = 0;
for(var i in player_textures.frames){
  player_texture_names[p_t_n_count] = i;
  p_t_n_count++;
}

var objs = {};
var goals = {};
var kabes = {};
var userCount = 0;

app.set('port', process.env.PORT || 80);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

var startTime = 0;
var initPoint = {};
initPoint.x = 0.0;
initPoint.y = 0.0;

var stageName = "";

// 世界
var b2d = require("box2d");
var worldAABB = new b2d.b2AABB();
worldAABB.lowerBound.Set(-100.0, -100.0);
worldAABB.upperBound.Set(100.0, 100.0);
var gravity = new b2d.b2Vec2(0.0, 0.0);
var doSleep = true;
var world = new b2d.b2World(worldAABB, gravity, doSleep);

// 地面
//var groundBodyDef = new b2d.b2BodyDef();
//groundBodyDef.position.Set(0.0, -1 * (gamedata.world.height/64.0));
//var groundBody = world.CreateBody(groundBodyDef);
//var groundShapeDef = new b2d.b2PolygonDef();
//groundShapeDef.SetAsBox(gamedata.world.width/32.0, 1.0);
//groundBody.CreateShape(groundShapeDef);

// 天井
//var roofBodyDef = new b2d.b2BodyDef();
//roofBodyDef.position.Set(0.0, (gamedata.world.height/64.0));
//var roofBody = world.CreateBody(roofBodyDef);
//var roofShapeDef = new b2d.b2PolygonDef();
//roofShapeDef.SetAsBox(gamedata.world.width/32.0, 1.0);
//roofBody.CreateShape(roofShapeDef);

// 壁左
//var wallLeftBodyDef = new b2d.b2BodyDef();
//wallLeftBodyDef.position.Set(-1 * (gamedata.world.width/64.0), 0.0);
//var wallLeftBody = world.CreateBody(wallLeftBodyDef);
//var wallLeftShapeDef = new b2d.b2PolygonDef();
//wallLeftShapeDef.SetAsBox(1.0, gamedata.world.height/32.0);
//wallLeftBody.CreateShape(wallLeftShapeDef);

// 壁右
//var wallRightBodyDef = new b2d.b2BodyDef();
//wallRightBodyDef.position.Set((gamedata.world.width/64.0), 0.0);
//var wallRightBody = world.CreateBody(wallRightBodyDef);
//var wallRightShapeDef = new b2d.b2PolygonDef();
//wallRightShapeDef.SetAsBox(1.0, gamedata.world.height/32.0);
//wallRightBody.CreateShape(wallRightShapeDef);

// add start
var socketIO = require('socket.io');
var io = socketIO.listen(server);
io.set("log level", 2);

var getPosition = function(data) {
	rotation = event.rotation;
};

// クライアントが接続してきたときの処理
io.sockets.on('connection', function(socket) {
  console.log("connection");

  // ステージデータ送信
  var count = 0;
  var msgs = [];
  for(var i in kabes){
    var position = kabes[i].GetPosition();
    var x = (position.x * 32) + (gamedata.world.width / 2.0);
    var y = (position.y * -32) + (gamedata.world.height / 2.0);
    var angle = (kabes[i].GetAngle() * -1);
    var xya = {x:x.toFixed(3), y:y.toFixed(3), angle:angle.toFixed(3), id:kabes[i].m_userData.id, texture:kabes[i].m_userData.texture, datatype:"object"};
    msgs[count] = xya;
    count++;
  }
  // ゴールデータ送信
  for(var i in goals){
    var position = goals[i].GetPosition();
    var x = (position.x * 32) + (gamedata.world.width / 2.0);
    var y = (position.y * -32) + (gamedata.world.height / 2.0);
    var angle = (goals[i].GetAngle() * -1);
    var xya = {x:x.toFixed(3), y:y.toFixed(3), angle:angle.toFixed(3), id:goals[i].m_userData.id, texture:goals[i].m_userData.texture, datatype:"object"};
    msgs[count] = xya;
    count++;
  }

  // メッセージ送信
  socket.emit('message', {value: msgs});

  // メッセージを受けたときの処理
  socket.on('message', function(data) {
    var obj = objs[socket.id];
    if(obj){
      //
    }else{
      //
    }
    if(data.name){
      if(data.picture){
        // ころころ追加
        var count = 0;
        var msgs = [];
        userCount++;
        var corocoroDef = new b2d.b2BodyDef();
//        corocoroDef.position.Set(-1 * (gamedata.world.width / 64.0) + 1.5, (gamedata.world.height / 64.0) - 1.5);
        corocoroDef.position.Set(initPoint.x + Math.random() -0.5, initPoint.y + Math.random() -0.5);
        var corocoro = world.CreateBody(corocoroDef);
        var corocoroShapeDef = new b2d.b2CircleDef();
        corocoroShapeDef.radius = 0.5;
        corocoroShapeDef.density = 1.0;
        corocoroShapeDef.friction = 0.5;
        corocoroShapeDef.restitution = 0.7;
        corocoro.CreateShape(corocoroShapeDef);
        corocoro.SetMassFromShapes();
        var userData = {};
        userData.id = "ball_" + userCount;
        userData.texture = player_texture_names[Math.floor(Math.random() * p_t_n_count)];
        userData.datatype = "player";
        userData.win = 0;
        userData.name = data.name;
        userData.picture = data.picture;
        userData.userType = data.userType;
        corocoro.m_userData = userData;
        objs[socket.id] = corocoro;
        var position = corocoro.GetPosition();
        var x = (position.x * 32) + (gamedata.world.width / 2.0);
        var y = (position.y * -32) + (gamedata.world.height / 2.0);
        var angle = (corocoro.GetAngle() * -1);
        var xya = {x:x.toFixed(3), y:y.toFixed(3), angle:angle.toFixed(3), id:corocoro.m_userData.id, texture:corocoro.m_userData.texture, datatype:"you", name:corocoro.m_userData.name, picture:corocoro.m_userData.picture, userType:corocoro.m_userData.userType};
        msgs[count] = xya;
        count++;

        // メッセージ送信
        socket.emit('message', {value: msgs});
      }
    }else if(data.gravity){
      if(obj){
        //
      }else{
        return;
      }
      if(data.gravity.x == 0 || data.gravity.y == 0){
        data.gravity.x = (Math.random() * 20.0) - 10.0;
        data.gravity.y = (Math.random() * 20.0) - 10.0;
      }
      var ax = (data.gravity.x / Math.sqrt((Math.pow(data.gravity.x, 2) + Math.pow(data.gravity.y, 2)))) * (10.0 + 5.0);
      var ay = (data.gravity.y / Math.sqrt((Math.pow(data.gravity.x, 2) + Math.pow(data.gravity.y, 2)))) * (10.0 + 5.0);
      obj.ApplyForce(new b2d.b2Vec2(ax, ay), obj.GetPosition());
    }
  });

  // クライアントが切断したときの処理
  socket.on('disconnect', function(){
    console.log("disconnect:" + socket.id);
    delObj = objs[socket.id];
    if(delObj){
      var xya = {x:-100.0, y:-100.0, angle:0.0, id:objs[socket.id].m_userData.id, delflag:1, datatype:"player"};
      var msgs = [];
      msgs[0] = xya;
      delete objs[socket.id];
      io.sockets.emit('message', {value: msgs});
      world.DestroyBody(delObj);
    }
  });
});

function makeStage(){
  if(startTime > 0){
    var nowTime = new Date();
    var pastTime = nowTime - startTime;
    var bestTimes = require('../best_time.json');
    if(bestTimes[stageName]){
      var bestTime = bestTimes[stageName].time;
      if(parseInt(bestTime) > parseInt(pastTime)){
        bestTimes[stageName] = {time:pastTime};
        fs.writeFile('./best_time.json', JSON.stringify(bestTimes));
      }
    }else{
      bestTimes[stageName] = {time:pastTime};
      fs.writeFile('./best_time.json', JSON.stringify(bestTimes));
    }
  }

  var stage = stages[Math.floor(Math.random() * stages.length)];
  kabes = [];
  goals = [];
  for(var i in stage){
    var b2dobj = stage[i];
    
    // ゴール配置
    if(b2dobj.datatype == "goal"){
      var goalDef = new b2d.b2BodyDef();
      goalDef.position.Set(b2dobj.x, b2dobj.y);
      goalDef.angle = b2dobj.angle;
      var goal = world.CreateBody(goalDef);
      var goalShapeDef = new b2d.b2PolygonDef();
      goalShapeDef.SetAsBox(b2dobj.w, b2dobj.h);
      goal.CreateShape(goalShapeDef);

      var userData = {};
      userData.id = b2dobj.id;
      userData.texture = b2dobj.texture;
      goal.m_userData = userData;

      goals[b2dobj.id] = goal;
    }else if(b2dobj.datatype == "kabe"){
      // 障害物追加
      var kabeDef = new b2d.b2BodyDef();
      kabeDef.position.Set(b2dobj.x, b2dobj.y);
      kabeDef.angle = b2dobj.angle;
      var kabe = world.CreateBody(kabeDef);
      var kabeShapeDef = new b2d.b2PolygonDef();
      kabeShapeDef.SetAsBox(b2dobj.w, b2dobj.h);
      kabe.CreateShape(kabeShapeDef);

      var userData = {};
      userData.id = b2dobj.id;
      userData.texture = b2dobj.texture;
      kabe.m_userData = userData;

      kabes[b2dobj.id] = kabe;
    }else if(b2dobj.datatype == "initPoint"){
      initPoint.x = b2dobj.x;
      initPoint.y = b2dobj.y;
      for(var i in objs){
        objs[i].SetXForm(new b2d.b2Vec2(b2dobj.x + Math.random() -0.5, b2dobj.y + Math.random() -0.5), 0.0);
      }
    }else if(b2dobj.datatype == "stageName"){
      stageName = b2dobj.name;
    }
  }
  startTime = new Date();
}
makeStage();

// 精度
var iterations = 10;
var fps = 15;
var interval;

function doAnim() {
  interval = setInterval(function() {
    world.Step(1.0/fps, iterations);
    var count = 0;
    var msgs = [];
    
    // ゴール判定
//    var contact = goals["goal"].m_contactList;
    for(var i in goals){
      contact = goals[i].m_contactList;
      if(contact){
        break;
      }
    }
    if(contact){
      contact.other.m_userData.win += 1;
      var ranking = new Array();
      for(var i in objs){
        var rank = {id:objs[i].m_userData.id, win:objs[i].m_userData.win};
        ranking.push(rank);
      }
      ranking.sort(
        function(a,b){
          return b.win - a.win;
        }
      );
      var xya = {datatype:"ranking", data:ranking, win_id:contact.other.m_userData.id};
      msgs[count] = xya;
      count++;

      // ステージ再作成 
      for(var i in kabes){
        xya = {x:0.0, y:0.0, angle:0.0, id:kabes[i].m_userData.id, texture:kabes[i].m_userData.texture, datatype:"object", delflag:1};
        msgs[count] = xya;
        count++;
//        delete kabes[i];
        world.DestroyBody(kabes[i]);
      }
      // ゴール再作成
      for(var i in goals){
        xya = {x:0.0, y:0.0, angle:0.0, id:goals[i].m_userData.id, texture:goals[i].m_userData.texture, datatype:"object", delflag:1};
        msgs[count] = xya;
        count++;
        world.DestroyBody(goals[i]);
      }
      makeStage();
      for(var i in kabes){
        var position = kabes[i].GetPosition();
        var x = (position.x * 32) + (gamedata.world.width / 2.0);
        var y = (position.y * -32) + (gamedata.world.height / 2.0);
        var angle = (kabes[i].GetAngle() * -1);
        var xya = {x:x.toFixed(3), y:y.toFixed(3), angle:angle.toFixed(3), id:kabes[i].m_userData.id, texture:kabes[i].m_userData.texture, datatype:"object"};
        msgs[count] = xya;
        count++;
      }
      for(var i in goals){
        var position = goals[i].GetPosition();
        var x = (position.x * 32) + (gamedata.world.width / 2.0);
        var y = (position.y * -32) + (gamedata.world.height / 2.0);
        var angle = (goals[i].GetAngle() * -1);
        var xya = {x:x.toFixed(3), y:y.toFixed(3), angle:angle.toFixed(3), id:goals[i].m_userData.id, texture:goals[i].m_userData.texture, datatype:"object"};
        msgs[count] = xya;
        count++;
      }

    }
    
    for(var i in objs){
      var position = objs[i].GetPosition();
      var x = (position.x * 32) + (gamedata.world.width / 2.0);
      var y = (position.y * -32) + (gamedata.world.height / 2.0);
      var angle = (objs[i].GetAngle() * -1);
      var xya = {x:x.toFixed(3), y:y.toFixed(3), angle:angle.toFixed(3), id:objs[i].m_userData.id, texture:objs[i].m_userData.texture, datatype:"player", name:objs[i].m_userData.name, picture:objs[i].m_userData.picture, userType:objs[i].m_userData.userType};
      if(objs[i].m_contactList){
        xya.collision = 1;
      }
      msgs[count] = xya;
      count++;
    }

    var nowTime = new Date();
    var pastTime = nowTime - startTime;
    var hour = Math.floor(pastTime/(60*60*1000));  // '時間'取得
    pastTime = pastTime-(hour*60*60*1000); 
    minutes = Math.floor(pastTime/(60*1000)); // '分'取得
    pastTime = pastTime-(minutes*60*1000);  
    second = Math.floor(pastTime/1000);  // '秒'取得
    milli = pastTime%1000; // 'ミリ秒'取得
    var sTime = ("00" + hour).slice(-2) + ":" + ("00" + minutes).slice(-2) + ":" + ("00" + second).slice(-2) + "." + ("000" + milli).slice(-3);
    var xyaTime = {datatype:"time", time:sTime};
    msgs[count] = xyaTime;
    count++;

    io.sockets.emit('message', {value: msgs});
  }, 1000/fps);
}
doAnim();

// add end